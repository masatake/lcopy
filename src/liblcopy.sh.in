#!/bin/bash
# 
#
# liblcopy.sh: support shell functions for lcopy
#
# Copyright (C) 2007, 2009 Masatake YAMATO
#
# Author: Masatake YAMATO <yamato@redhat.com>
#
# program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

LCOPY_VERSION=@VERSION@

prefix=@prefix@
exec_prefix=@exec_prefix@
libexecdir=@libexecdir@

LCOPY_LIBEXECDIR=${LCOPY_LIBEXECDIR:-"${libexecdir}/lcopy"}
LCOPY_BACKENDDIR=${LCOPY_BACKENDDIR:-"${LCOPY_LIBEXECDIR}/backends"}
LCOPY_HOOKDIR=${LCOPY_HOOKDIR:-"${LCOPY_LIBEXECDIR}/hook.d"}

function lcopy_backends_list
{
    local backend
    [ -d "${LCOPY_BACKENDDIR}" ] && \
	find "${LCOPY_BACKENDDIR}" -perm +0100 -xtype f \
	| sort \
	| grep -v '~$' \
	| while read backend; do basename "$backend"; done
}	
    

function lcopy_backends_help
{
    local subcmd=$1
    for b in $(lcopy_backends_list); do
	lcopy_backend_help $b $subcmd
    done
}

function lcopy_backend_call
{
    local vcs=$1
    shift

    local subcmd=$1
    shift

    ${LCOPY_BACKENDDIR}/$vcs $subcmd "$@"
}

function lcopy_backend_help
{
    local vcs=$1
    local subcmd=$2

    lcopy_backend_call $vcs help $subcmd
}

function lcopy_backend_genconf
{
    local vcs=$1
    shift

    lcopy_backend_call $vcs genconf "$@"
}

function lcopy_backend_genconf_format
{
    local vcs=$1
    shift

    lcopy_backend_call $vcs genconf_format
}

function lcopy_backend_checkout
{
    local vcs=$1
    shift

    lcopy_backend_call $vcs checkout "$@"
}

function lcopy_backend_print_cmdline
{
    local vcs=$1
    shift
    local input=$1
    shift
    local cmd=$1
    shift

    if [ "$cmd" = "checkout" ]; then
	lcopy_backend_call "$vcs" print_cmdline "$input" "$cmd"
	return $?
    else
	echo "$cmd is not supported in command printing" 1>&2
	return 1
    fi
}

function lcopy_backend_update
{
    local vcs=$1
    shift
    lcopy_backend_call $vcs update "$@"
}

function lcopy_backend_rebirth
{
    local vcs=$1
    shift

    lcopy_backend_call $vcs rebirth "$@"
}

function lcopy_backend_dirp
{
    local vcs=$1
    shift

    lcopy_backend_call $vcs dirp "$@"
}

function lcopy_prepare_archives
{
    local base_dir=$1
    local pointer=$2
    
    if [ -n "$pointer" ]; then
	if [ -h ${base_dir}/archives ]; then
	    rm -f ${base_dir}/archives
	fi
	if ! [ -e ${base_dir}/archives ]; then
	    (cd ${base_dir}; ln -s "$pointer" ./archives)
	fi
    elif [ ! -e ${base_dir}/archives ]; then
	(cd ${base_dir}; ln -s ./pre-build ./archives)
    fi
}

function lcopy_run_hook
{
    local action=$1
    local base_dir=$2
    
    if [ -d "${LCOPY_HOOKDIR}" ]; then
	find "${LCOPY_BACKENDDIR}" -perm +0100 -xtype f \
	    | sort -n      \
	    | grep -v '~$' \
	    | while read hook; do 
	        "$hook" "$action" "$base_dir"
	done
    fi
}

function lcopy_verify_directory
{
    local dir=$1

    if ! [ -d "$dir" ]; then
	echo "cannot read: $dir" 1>&2
	return 1
    fi

    if ! [ -f "$dir"/LCOPY ]; then
	echo "cannot find LCOPY file under $dir" 1>&2
	return 1
    fi
    if ! [ -w "$dir"/STATUS ]; then
	echo "cannot write to STATUS file under $dir" 1>&2
	return 1
    fi
    if ! [ -d "$dir"/pre-build ]; then
	echo "cannot find pre-build directory under $dir" 1>&2
	return 1
    fi
    if ! [ -w "$dir"/pre-build ]; then
	echo "cannot write pre-build directory under $dir" 1>&2
	return 1
    fi

    if ! [ -r "$dir"/checkout.lcopy ]; then
	echo "cannot read checkout.lcopy file under $dir" 1>&2
	return 1
    fi


    return 0
}

function lcopy_relative_path
{
    local from=${1:1}
    local to=${2:1}

    local froma
    local toa
    IFS=/ read -a froma <<< "$from"
    IFS=/ read -a toa <<< "$to"
    
    local froml=$(( ${#froma[@]} - 1 ))
    local tol="${#toa[@]}"
    local min_len
    if [ "$froml" -gt "$tol" ]; then
	min_len="$tol"
    else
	min_len="$froml"
    fi

    local i
    local common_index
    for (( i = 0 ; i < min_len ; i++ )); do
	if ! [ "${froma[$i]}" = "${toa[$i]}" ]; then
	    break
	fi
    done
    common_index=$i
    
    local relative_path=""
    for (( i = common_index ; i < froml ; i++ )); do
	relative_path=../${relative_path}
    done
    if [ -z "$relative_path" ]; then
	relative_path=./
    fi

    for (( i = common_index ; i < tol ; i++ )); do
	relative_path="${relative_path}${toa[$i]}/"
    done
    
    echo ${relative_path/%\/}
}


function lcopy_print_conf
{
    local vcs="$1"
    local package="$2"
    local branch="$3"
    local update="$4"
    local generated_by="$5"

    printf "LCOPY_CF_VERSION=\"%s\"\n" $LCOPY_VERSION
    printf "LCOPY_VCS=\"%s\"\n" $vcs
    printf "LCOPY_PACKAGE=\"%s\"\n" $package
    printf "LCOPY_BRANCH=\"%s\"\n" $branch
    printf "LCOPY_UPDATE=\"%s\"\n" $update
    printf "LCOPY_GENERATED_BY=\"%s\"\n" "$generated_by"
}
