#!/bin/bash

source liblcopy.sh ||  exit 1


ROOT_DIR=
BASE_DIR=
NO_UPDATE_P=

function print_usage
{
    echo "Usage: "
    echo "$0 --help|-h"
    echo "$0 --root-dir=ROOT-DIR"
    echo "$0 BASE-DIR"
    echo "$0 --no-update-p BASE-DIR"
    echo ""
    echo "--no-update-p checks the value for LCOPY_UPDATE in conf file: "
    echo "	Returns 0 if the value is no."
    echo
    echo "environment variables:"
    echo "SRPMIX_CRADLE_NAME=NAME"
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    (--root-dir=*)
	        ROOT_DIR=${1/--root-dir=}
		if ! [ -d "$ROOT_DIR" ]; then
		    echo "no such directory: $ROOT_DIR" 1>&2
		    exit 1
		fi
		;;
	    --no-update-p)
		NO_UPDATE_P=yes
		;;
	    --*)
		echo "unknown option: $1" 1>&2
		print_usage 1>&2
		exit 1
		;;
	    *)
		BASE_DIR=$1
		shift
		if [ -n "$NO_UPDATE_P" ]; then
		    if ! [ -r "$BASE_DIR/checkout.lcopy" ]; then
			echo "cannot read $BASE_DIR/checkout.lcopy" 1>&2
			exit 1
		    else
			break
		    fi
		elif ! lcopy_verify_directory "$BASE_DIR"; then
		    exit 1
		else
		    break
		fi
		;;
	    esac
	shift
    done

    if [ $# -gt 0 ]; then
	echo "too many arguments: $@" 1>&2
	print_usage 1>&2
	exit 1
    fi

    if [ -z "$ROOT_DIR" ] && [ -z "$BASE_DIR" ]; then
	echo "specify either ROOT-DIR or BASE-DIR" 1>&2
	print_usage 1>&2
	exit 1
    fi

    if [ -n "$ROOT_DIR" ] && [ -n "$BASE_DIR" ]; then
	echo "do not specify both ROOT-DIR or BASE-DIR" 1>&2
	print_usage 1>&2
	exit 1
    fi

    if [ -n "$NO_UPDATE_P" ] && [ -n "$ROOT_DIR" ]; then
	echo "--no-update-p doesn't work with --root-dir recursive mode" 1>&2
	print_usage 1>&2
	exit 1
    fi
}

function update
{
    local base_dir=$1
    local lcopy_file=${base_dir}/checkout.lcopy
    local update_dir=${base_dir}/pre-build
    local hook_action=noupdate
    local status


    if ! source ${lcopy_file}; then
	echo "failed to source ${lcopy_file}" 2>&1
	exit 1
    fi


    if [ -n "$NO_UPDATE_P" ]; then
	if [ "$LCOPY_UPDATE" = "no" ]; then
	    exit 0
	else
	    exit 1
	fi
    fi

    if [ "$LCOPY_UPDATE" = "no" ]; then
	exit 0
    fi

    if [ -z "$LCOPY_VCS" ]; then
	echo "No LCOPY_VCS in ${lcopy_file}" 2>&1
	exit 1
    else
	local vcs_found
	for v in $(lcopy_backends_list); do
	    if [ "$LCOPY_VCS" = "$v" ] ;then
		vcs_found=yes
		break
	    fi
	done
	if [ -z "$vcs_found" ]; then
	    echo "unsupported vcs: $LCOPY_VCS" 1>&2
	    exit 1
	fi
    fi
 
    lcopy_backend_update ${LCOPY_VCS} ${lcopy_file} ${update_dir}/*
    status=$?
    echo $status > ${base_dir}/STATUS

    if [ -z "${SRPMIX_CRADLE_NAME}" ]; then
	SRPMIX_CRADLE_NAME=unknown
    fi
    echo ${SRPMIX_CRADLE_NAME} > "${base_dir}/CRADLE"
    
    lcopy_prepare_archives "${base_dir}" "$LCOPY_ARCHIVE_POINTER"

    if [ "$status" -eq "1" ]; then
	status=0
	hook_action=update
    fi

    lcopy_run_hook "${hook_action}" "${base_dir}"            
    
    return $status
}


function main
{
    local ncpus=$(cat /proc/cpuinfo | grep processor | wc -l)
    parse_arguments "$@"

    if [ -n "$ROOT_DIR" ]; then
	for d in "$ROOT_DIR"/[a-zA-Z0-9]/*/*; do
	    if [ -d "$d" ] && [ -w "$d" ]; then
		echo "$0 $d; exit 0"
	    fi
	done | spawn -j$ncpus
    else
	update "$BASE_DIR"
    fi
}

main "$@"
