#!/bin/bash

PACKAGE=
BRANCH=trunk
DIR=$(pwd)


source liblcopy.sh ||  exit 1

function print_usage
{
    echo "Usage: "
    echo "$0 --help|-h"
    echo "$0 [--output-dir=OUTPUT-DIR] PACKAGE,BRANCH [DIR]"
}

function parse_arguments
{
    while [ $# -gt 0 ]; do
	case "$1" in
	    --help|-h)
		print_usage
		exit 0
		;;
	    (--output-dir=*)
	        local output_dir
                output_dir=${1/--output-dir=}
		if ! [ -d "$output_dir" ]; then
		    echo "no such directory: $output_dir" 1>&2
		    print_usage 1>&2
		    exit 1
		fi
		OUTPUT_DIR=$output_dir
                ;;
	    --*)
		echo "unknown option: $1" 1>&2
		print_usage 1>&2
		exit 1
		;;
	    *)
		break
		;;
	    esac
	shift
    done

    if [ $# -gt 2 ]; then
	echo "too many arguments: $@" 1>&2
	print_usage 1>&2
	exit 1
    fi


    local package_branch
    package_branch=$1
    shift

    if ! [[ "${package_branch}" =~ ^([-a-zA-Z0-9_]+)(,([-a-zA-Z0-9_]+))?$ ]]; then
	echo "broken package,branch specification: ${package_branch}" 1>&2
	print_usage 1>&2
	exit 1
    else
	PACKAGE=${BASH_REMATCH[1]}
	BRANCH=${BASH_REMATCH[3]}
    fi


    local dir
    dir=$1
    shift
    if [ -n "$dir" ]; then
	DIR=$dir
    fi
    if ! [ -d "$DIR" ]; then
	echo "no such directory: $DIR" 1>&2
	exit 1
    fi
}

function main
{
    parse_arguments "$@"

    local output_file=/dev/stdout
    if [ -n "$OUTPUT_DIR" ]; then
	my_tmpdir=`mktemp -d`
	trap "chmod -R u+w $my_tmpdir; /bin/rm -rf $my_tmpdir" 0    
	output_file=$my_tmpdir/lcopy
    fi

    local vcs
    for v in $(lcopy_backends_list); do
	if lcopy_backend_dirp "$v" "$DIR"; then
	    vcs=$v
	    break
	fi
    done
    if [ -z "$vcs" ]; then
	echo "No suitable backend for $DIR" 1>&2
	exit 1
    fi

    echo '# -*- shell-script -*-' > ${output_file}
    lcopy_backend_rebirth $vcs "$DIR" >> ${output_file}
    status=$?
    if [ $status = 0 ]; then
	lcopy_print_conf "$vcs" "$PACKAGE" "$BRANCH" >> ${output_file}
	if [ -n "$output_dir" ]; then
	    mv ${output_file} ${OUTPUT_DIR}/"${PACKAGE},${BRANCH}.lcopy"
	fi
	return $?
    else
	return $status
    fi
}

main "$@"